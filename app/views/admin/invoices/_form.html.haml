.row
  .col-md-12
    .page-header
      %h1
        = @invoice.new_record? ? 'New invoice' : 'Edit Invoice'

      .text-muted
        -# User: #{invoice.user.try(:name)}
        -# (#{invoice.user.email})

= semantic_form_for @invoice, url: @url do |f|
  .row

    .col-md-3
      = f.input :kind, selected: @invoice.kind, input_html: { collection: Invoice::kinds }
    .col-md-2
      = f.input :currency, selected: @invoice.currency || 'EURO', collection: ENV['OSEM_DEFAULT_CURRENCIES'].split(' ')
    .col-md-2.col-md-offset-2
      = f.input :no
    .col-md-2
      = f.input :date, as: :string, input_html: { id: 'registration-period-start-datepicker', readonly: 'readonly' }
  = f.inputs 'Recipient Information' do
    .row
      .col-md-6
        - collection_items = []
        - users = User.active.pluck(:id, :name, :username, :email, :invoice_details, :invoice_vat).map { |user| [user[0], user[1].blank? ? user[2] : user[1], user[2], user[3]] }.sort_by { |user| user[1].downcase }
        = f.input :recipient, as: :select,
                              collection: options_for_select(users.map {|user| ["#{user[1]} (#{user[2]}) #{user[3]}", user[0]]}, @invoice.recipient),
                              include_blank: false, label: 'Speakers', input_html: { class: 'select-help-toggle', multiple: 'false' }


        %div.hidden#invoice-recipient{ 'data-class' => @invoice.recipient.try(:class) || 'User' }
        - if @invoice.recipient.class == 'User'
          - collection_items = User.active.sort_by { |user| user.name.downcase }.map { |user| ["#{user.name} (#{user.email})", user.id, data: { invoice_details: user.invoice_details } ]}

          = f.input :recipient, as: :select,
                                collection: collection_items, selected: @invoice.recipient.id,
                                include_blank: false, input_html: { class: 'select-help-toggle', multiple: 'false' }


        - elsif @invoice.recipient.class.to_s == 'Sponsor'
          - collection_items = @conference.sponsors.map{ |sponsor| ["#{sponsor.name} (#{sponsor.email}) - #{sponsor.sponsorship_level.title}", sponsor.id] }

          = f.input :recipient, as: :select, include_blank: false,
                                collection: collection_items,
                                selected: @invoice.recipient.id



      .col-md-6
        = f.input :recipient_details, input_html: { value: @invoice.recipient_details, rows: 5, data: { provide: 'markdown-editable' } }, hint: markdown_hint
    .row
      .col-md-6.col-md-offset-6
        = f.input :recipient_vat

  .row
    .col-md-4
      - if @user_tickets
        = f.input 'tickets', label: 'Tickets', collection: @user_tickets_collection, multiple: true, selected: @user_tickets.map{ |x| x[:ticket].id }

  .row
    .col-md-8
      #description
        %table.table
          %tr
            %th.col-md-5 Description
            %th Quantity
            %th Total Price
            %th.col-md-3

        - if @invoice.description.present?
          - @invoice.description.each do |item|
            = render partial: 'invoice_items', locals: { item: item }
        - elsif @user_tickets
          - @user_tickets.each do |item|
            - item[:description] = item[:ticket].title
            = render partial: 'invoice_items', locals: { item: item }
        - else
          = render partial: 'invoice_items', locals: { item: nil }

      %br
      = link_to 'Add item', admin_conference_invoices_add_item_path(@conference), remote: true
      %br
      %br


      -# = f.input :description, label: "Ticket Name, Quantity, Total Price", input_html: { rows: 2, data: { provide: 'markdown-editable' } }, hint: markdown_hint
      %hr
  .row
    .col-md-2
      = f.input :total_amount, value: @invoice.total_amount
    .col-md-2
      = f.input :vat_percent, label: 'VAT percent (%)'
    .col-md-2
      - hint = @invoice.recipient.try(:invoice_vat).present? ? '' : 'No VAT number was supplied!'
      = f.input :vat, hint: hint
    .col-md-2
      = f.input :payable
      - if @payment && (@payment.amount != @invoice.payable)
        %p The amount is different than the payment amount (#{@payment.amount})!
      %input{ name: 'payment_id', type: 'hidden', value: @payment.try(:id) }
      -# %input{ name: 'invoice[ticket_purchase_ids]', type: 'hidden', value: @ticket_purchases.pluck(:id) }

      - if @user_tickets
        = hidden_field_tag 'invoice[ticket_purchase_ids]', @user_tickets.map{ |x| x[:ticket_purchase_ids] }.flatten, class: 'form-control'
  .row
    .col-md-12
      = f.submit 'Save', class: 'btn btn-primary'

:javascript
  $(document).ready(function() {
    $('#invoice_recipient_id').selectize({
      plugins: ['remove_button'],
      maxItems: 5
    } )
  });

  $('#invoice_recipient_id').change(function() {
    var recipient_class = $('#invoice-recipient').data('class');

    $('#invoice_recipient_id option:selected').each(function(){
      var id = $(this).val();
      $.ajax({
        url: '/invoice_info',
        method: 'GET',
        dataType: 'script',
        data: { model: recipient_class, id: id }
      });
    });
  });

  $("#invoice_ticket_purchase_ids").change(function () {
    // $('#invoice_description').text("Ticket Name \t Quantity \t Total Price");
    $('#invoice_description').text('')
    var rows = $('#invoice_ticket_purchase_ids :selected').length;

    $('#invoice_ticket_purchase_ids option').each(function() {
      if($(this).is(':selected')) {
        var selected = $(this);
        var text = "\nTicket " + selected.data('ticket-name') + "\t" + selected.data('quantity') + "\t" + selected.data('total-price');

        $('#invoice_description').attr('rows', rows+1);
        $('#invoice_description').append(text);
      }
    });
  });

  $("#invoice_vat_percent").change(function () {
    $("#invoice_vat").val(($("#invoice_total_amount").val() * parseFloat($("#invoice_vat_percent").val()) / 100).toFixed(2));

    calculatePayable();
  });

  $("#invoice_total_amount").change(function () {
    $("#invoice_vat").val(($("#invoice_total_amount").val() * parseFloat($("#invoice_vat_percent").val()) / 100).toFixed(2));
    calculatePayable();
  });

  function calculatePayable() {
    var payable = (parseFloat($("#invoice_vat").val()) + parseFloat($("#invoice_total_amount").val())).toFixed(2);

    $("#invoice_payable").val(payable);
  }

  $("#invoice_payable").change(function () {
    payable_change($(this).val());
  });

  function payable_change(total_amount) {
    if (!total_amount > 0) {
      var total_amount = parseFloat(0);

      $("[id='invoice_description__price']").each( function( index ) {
        price = parseFloat($(this).val()).toFixed(2);
        total_amount = (parseFloat(total_amount) + parseFloat(price)).toFixed(2);
      });
    }

    var vat_percent = parseFloat($("#invoice_vat_percent").val());
    var vat = (total_amount * vat_percent / 100).toFixed(2);

    $("#invoice_total_amount").val(total_amount);
    $("#invoice_vat").val(vat);
    calculatePayable()
  }
